### Starting build.
# Target: parser.mli.depends, tags: { extension:mli, file:parser.mli, ocaml, ocamldep, quiet }
ocamldep.opt -modules parser.mli > parser.mli.depends
# Target: parser.cmi, tags: { byte, compile, extension:mli, file:parser.mli, interf, ocaml, quiet }
ocamlc.opt -c -o parser.cmi parser.mli
# Target: parser.ml.depends, tags: { extension:ml, file:parser.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules parser.ml > parser.ml.depends
# Target: combinators.mli.depends, tags: { extension:mli, file:combinators.mli, ocaml, ocamldep, quiet }
ocamldep.opt -modules combinators.mli > combinators.mli.depends
# Target: combinators.cmi, tags: { byte, compile, extension:mli, file:combinators.mli, interf, ocaml, quiet }
ocamlc.opt -c -o combinators.cmi combinators.mli
# Target: combinators.ml.depends, tags: { extension:ml, file:combinators.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules combinators.ml > combinators.ml.depends
# Target: example.ml.depends, tags: { extension:ml, file:example.ml, ocaml, ocamldep, quiet }
ocamldep.opt -modules example.ml > example.ml.depends
# Target: parser.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:parser.cmo, file:parser.ml, implem, ocaml, quiet }
ocamlc.opt -c -o parser.cmo parser.ml
# Target: combinators.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:combinators.cmo, file:combinators.ml, implem, ocaml, quiet }
ocamlc.opt -c -o combinators.cmo combinators.ml
# Target: example.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:example.cmo, file:example.ml, implem, ocaml, quiet }
ocamlc.opt -c -o example.cmo example.ml
# Target: bus.cma, tags: { byte, extension:cma, file:bus.cma, library, link, ocaml, quiet }
ocamlc.opt -a parser.cmo combinators.cmo example.cmo -o bus.cma
# Compilation successful.
